let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make =
    ((fun ?(name= (("")[@reason.raw_literal ""])) ->
        ((React.Fragment.make
            ~children:[React.Dom.createDOMElementVariadic "div"
                         ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                         [((React.string
                              ((("Hello ")[@reason.raw_literal "Hello "]) ^
                                 name))
                         [@reason.preserve_braces ])];
                      Hello.make ~one:(("1")[@reason.raw_literal "1"])
                        ~children:[((React.string
                                       ((("Hello ")
                                          [@reason.raw_literal "Hello "]) ^
                                          name))
                                  [@reason.preserve_braces ])] ()] ())
        [@reason.preserve_braces ]))
    [@warning "-16"]) in
  let make
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ?name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ?name ())
let make =
  let make_props
    : a:'a ->
        b:'b ->
          ?key:string ->
            unit ->
              <
                a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                          Js_of_ocaml.Js.readonly_prop
                                                         > 
                Js_of_ocaml.Js.t
    =
    fun ~a ->
      fun ~b ->
        fun ?key ->
          fun () ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                [|("key",
                    (inject
                       (Js_of_ocaml.Js.Optdef.option
                          (Option.map Js_of_ocaml.Js.string key))));("b",
                                                                    (inject b));
                  ("a", (inject a))|] in
  let make =
    ((fun ~a ->
        ((fun ~b ->
            fun _ ->
              ((print_endline (("This function should be named `Test`")
                  [@reason.raw_literal
                    "This function should be named `Test`"]);
                React.Dom.createDOMElementVariadic "div"
                  ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                  [])
              [@reason.preserve_braces ]))
        [@warning "-16"]))
    [@warning "-16"]) in
  let make
    (Props :
      <
        a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                  Js_of_ocaml.Js.readonly_prop
                                                 > 
        Js_of_ocaml.Js.t)
    =
    make
      ~b:(fun (type res) -> fun (type a0) ->
            fun (a0 : a0 Js_of_ocaml.Js.t) ->
              fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
      ~a:(fun (type res) -> fun (type a0) ->
            fun (a0 : a0 Js_of_ocaml.Js.t) ->
              fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
  fun ~a ->
    fun ~b ->
      fun ?key ->
        fun () -> React.createElement make (make_props ?key ~b ~a ())
module External =
  struct
    external component : a:int -> b:string -> React.element = ""[@@react.component
                                                                  ][@@otherAttribute
                                                                    (("bla")
                                                                    [@reason.raw_literal
                                                                    "bla"])]
  end
module Bar =
  struct
    let make =
      let make_props
        : a:'a ->
            b:'b ->
              ?key:string ->
                unit ->
                  <
                    a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                              Js_of_ocaml.Js.readonly_prop
                                                             > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject b));("a", (inject a))|] in
      let make =
        ((fun ~a ->
            ((fun ~b ->
                fun _ ->
                  ((print_endline
                      (("This function should be named `Test$Bar`")
                      [@reason.raw_literal
                        "This function should be named `Test$Bar`"]);
                    React.Dom.createDOMElementVariadic "div"
                      ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                      [])
                  [@reason.preserve_braces ]))
            [@warning "-16"]))
        [@warning "-16"]) in
      let make
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        make
          ~b:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun () -> React.createElement make (make_props ?key ~b ~a ())
    let component =
      let component_props
        : a:'a ->
            b:'b ->
              ?key:string ->
                unit ->
                  <
                    a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                              Js_of_ocaml.Js.readonly_prop
                                                             > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject b));("a", (inject a))|] in
      let component =
        ((fun ~a ->
            ((fun ~b ->
                fun _ ->
                  ((print_endline
                      (("This function should be named `Test$Bar$component`")
                      [@reason.raw_literal
                        "This function should be named `Test$Bar$component`"]);
                    React.Dom.createDOMElementVariadic "div"
                      ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                      [])
                  [@reason.preserve_braces ]))
            [@warning "-16"]))
        [@warning "-16"]) in
      let component
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        component
          ~b:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun () ->
              React.createElement component (component_props ?key ~b ~a ())
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    let make =
      let make_props
        : a:'a ->
            b:'b ->
              ?key:string ->
                unit ->
                  <
                    a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                              Js_of_ocaml.Js.readonly_prop
                                                             > 
                    Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ~b ->
            fun ?key ->
              fun () ->
                let open Js_of_ocaml.Js.Unsafe in
                  obj
                    [|("key",
                        (inject
                           (Js_of_ocaml.Js.Optdef.option
                              (Option.map Js_of_ocaml.Js.string key))));
                      ("b", (inject b));("a", (inject a))|] in
      let make =
        ((fun ~a ->
            ((fun ~b ->
                fun _ ->
                  ((print_endline
                      (("This function should be named `Test$Func`")
                      [@reason.raw_literal
                        "This function should be named `Test$Func`"]) M.x;
                    React.Dom.createDOMElementVariadic "div"
                      ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                      [])
                  [@reason.preserve_braces ]))
            [@warning "-16"]))
        [@warning "-16"]) in
      let make
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        make
          ~b:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun () -> React.createElement make (make_props ?key ~b ~a ())
  end
module ForwardRef =
  struct
    let make =
      let make_props
        : ?key:string ->
            ?ref:React.Dom.domRef -> unit -> <  >  Js_of_ocaml.Js.t
        =
        fun ?key ->
          fun ?ref ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("ref", (inject (Js_of_ocaml.Js.Optdef.option ref)));
                    ("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Option.map Js_of_ocaml.Js.string key))))|] in
      let make =
        ((fun theRef ->
            React.Dom.createDOMElementVariadic "div"
              ~props:(Js_of_ocaml.Js.Unsafe.obj
                        [|("ref",
                            (Js_of_ocaml.Js.Unsafe.inject
                               (((theRef |> Js_of_ocaml.Js.Opt.to_option)
                               [@reason.preserve_braces ]) : React.Dom.domRef)))|] : 
              React.Dom.domProps)
              [((React.string (("ForwardRef")
                   [@reason.raw_literal "ForwardRef"]))
              [@reason.preserve_braces ])])
        [@warning "-16"]) in
      let make =
        React.forwardRef
          (fun (Props : <  >  Js_of_ocaml.Js.t) -> fun theRef -> make theRef) in
      fun ?key ->
        fun ?ref ->
          fun () -> React.createElement make (make_props ?ref ?key ())
  end
module Memo =
  struct
    let make =
      let make_props
        : a:'a ->
            ?key:string ->
              unit ->
                < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ?key ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Option.map Js_of_ocaml.Js.string key))));
                    ("a", (inject a))|] in
      let make =
        ((fun ~a ->
            ((React.Dom.createDOMElementVariadic "div"
                ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                [(((Printf.sprintf (("`a` is %s")
                      [@reason.raw_literal "`a` is %s"]) a)
                     |> React.string)
                [@reason.preserve_braces ])])
            [@reason.preserve_braces ]))
        [@warning "-16"]) in
      let make =
        React.memo
          (fun
             (Props :
               < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
             ->
             make
               ~a:(fun (type res) -> fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                     (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a))) in
      fun ~a ->
        fun ?key ->
          fun () -> React.createElement make (make_props ?key ~a ())
  end
module MemoCustomCompareProps =
  struct
    let make =
      let make_props
        : a:'a ->
            ?key:string ->
              unit ->
                < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
        =
        fun ~a ->
          fun ?key ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Option.map Js_of_ocaml.Js.string key))));
                    ("a", (inject a))|] in
      let make =
        ((fun ~a ->
            ((React.Dom.createDOMElementVariadic "div"
                ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                [(((Printf.sprintf (("`a` is %d")
                      [@reason.raw_literal "`a` is %d"]) a)
                     |> React.string)
                [@reason.preserve_braces ])])
            [@reason.preserve_braces ]))
        [@warning "-16"]) in
      let make =
        React.memoCustomCompareProps
          (fun
             (Props :
               < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
             ->
             make
               ~a:(fun (type res) -> fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                     (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)))
          (fun prevPros -> fun nextProps -> false) in
      fun ~a ->
        fun ?key ->
          fun () -> React.createElement make (make_props ?key ~a ())
  end
let fragment foo = ((React.Fragment.make ~children:[foo] ())[@bla ])
let polyChildrenFragment foo bar =
  React.Fragment.make ~children:[foo; bar] ()
let nestedFragment foo bar baz =
  React.Fragment.make
    ~children:[foo; React.Fragment.make ~children:[bar; baz] ()] ()
let upper = Upper.make ()
let upperWithProp = Upper.make ~count ()
let upperWithChild foo = Upper.make ~children:[foo] ()
let upperWithChildren foo bar = Upper.make ~children:[foo; bar] ()
let lower =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps) []
let lowerWithChildAndProps foo =
  React.Dom.createDOMElementVariadic "a"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("tabIndex", (Js_of_ocaml.Js.Unsafe.inject (1 : int)));
                ("href",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("https://example.com")
                        [@reason.raw_literal "https://example.com"]) : 
                        string))))|] : React.Dom.domProps) [foo]
let lowerWithChildren foo bar =
  React.Dom.createDOMElementVariadic "lower"
    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps) [foo; bar]
let lowerWithChildrenComplex =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("className",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("flex-container")
                        [@reason.raw_literal "flex-container"]) : string))))|] : 
    React.Dom.domProps)
    [React.Dom.createDOMElementVariadic "div"
       ~props:(Js_of_ocaml.Js.Unsafe.obj
                 [|("className",
                     (Js_of_ocaml.Js.Unsafe.inject
                        (Js_of_ocaml.Js.string ((("sidebar")
                           [@reason.raw_literal "sidebar"]) : string))))|] : 
       React.Dom.domProps)
       [React.Dom.createDOMElementVariadic "h2"
          ~props:(Js_of_ocaml.Js.Unsafe.obj
                    [|("className",
                        (Js_of_ocaml.Js.Unsafe.inject
                           (Js_of_ocaml.Js.string ((("title")
                              [@reason.raw_literal "title"]) : string))))|] : 
          React.Dom.domProps)
          [(((("jsoo-react")[@reason.raw_literal "jsoo-react"]) |> s)
          [@reason.preserve_braces ])];
       React.Dom.createDOMElementVariadic "nav"
         ~props:(Js_of_ocaml.Js.Unsafe.obj
                   [|("className",
                       (Js_of_ocaml.Js.Unsafe.inject
                          (Js_of_ocaml.Js.string ((("menu")
                             [@reason.raw_literal "menu"]) : string))))|] : 
         React.Dom.domProps)
         [React.Dom.createDOMElementVariadic "ul"
            ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
            [(((examples |>
                  (List.map
                     (fun e ->
                        ((React.Dom.createDOMElementVariadic "li"
                            ~props:(Js_of_ocaml.Js.Unsafe.obj
                                      [|("key",
                                          (Js_of_ocaml.Js.Unsafe.inject
                                             (Js_of_ocaml.Js.string
                                                (((e.path)
                                                [@reason.preserve_braces ]) : 
                                                string))))|] : React.Dom.domProps)
                            [React.Dom.createDOMElementVariadic "a"
                               ~props:(Js_of_ocaml.Js.Unsafe.obj
                                         [|("href",
                                             (Js_of_ocaml.Js.Unsafe.inject
                                                (Js_of_ocaml.Js.string
                                                   (((e.path)
                                                   [@reason.preserve_braces ]) : 
                                                   string))));("onClick",
                                                                (Js_of_ocaml.Js.Unsafe.inject
                                                                   (((
                                                                   fun event
                                                                    ->
                                                                    ((
                                                                    ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))
                                                                   [@reason.preserve_braces
                                                                    ]) : 
                                                                   React.Event.Mouse.t
                                                                    -> 
                                                                    unit)))|] : 
                               React.Dom.domProps)
                               [((e.title |> s)[@reason.preserve_braces ])]])
                        [@reason.preserve_braces ]))))
                 |> React.list)
            [@reason.preserve_braces ])]]]]
let lowerWithChildrenComplex2 =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("className",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("content-wrapper")
                        [@reason.raw_literal "content-wrapper"]) : string))))|] : 
    React.Dom.domProps)
    [React.Dom.createDOMElementVariadic "div"
       ~props:(Js_of_ocaml.Js.Unsafe.obj
                 [|("className",
                     (Js_of_ocaml.Js.Unsafe.inject
                        (Js_of_ocaml.Js.string ((("content")
                           [@reason.raw_literal "content"]) : string))))|] : 
       React.Dom.domProps)
       [(((let example =
             (examples |>
                (List.find_opt
                   (fun e ->
                      ((e.path =
                          ((List.nth_opt url.path 0) |>
                             (Option.value ~default:(("")
                                [@reason.raw_literal ""]))))
                      [@reason.preserve_braces ]))))
               |> (Option.value ~default:firstExample) in
           React.Dom.createDOMElementVariadic "div"
             ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
             [React.Dom.createDOMElementVariadic "h2"
                ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                [((example.title |> s)[@reason.preserve_braces ])];
             React.Dom.createDOMElementVariadic "h4"
               ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
               [(((("Rendered component")
                    [@reason.raw_literal "Rendered component"]) |> s)
               [@reason.preserve_braces ])];
             ((example.element)
             [@reason.preserve_braces ]);
             React.Dom.createDOMElementVariadic "h4"
               ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
               [(((("Code")[@reason.raw_literal "Code"]) |> s)
               [@reason.preserve_braces ])];
             ((example.code)
             [@reason.preserve_braces ])]))
       [@reason.preserve_braces ])]]
let nestedElement = Foo.Bar.make ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ()
let innerHTML =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("dangerouslySetInnerHTML",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (((React.Dom.makeInnerHtml ~__html:(("<lol></lol>")
                          [@reason.raw_literal "<lol></lol>"]))
                     [@reason.preserve_braces ]) : React.Dom.DangerouslySetInnerHTML.t)))|] : 
    React.Dom.domProps) []
let make =
  let make_props
    : title:'title ->
        children:'children ->
          ?key:string ->
            unit ->
              <
                title: 'title Js_of_ocaml.Js.readonly_prop  ;children: 
                                                               'children
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                 > 
                Js_of_ocaml.Js.t
    =
    fun ~title ->
      fun ~children ->
        fun ?key ->
          fun () ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                [|("key",
                    (inject
                       (Js_of_ocaml.Js.Optdef.option
                          (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (inject
                                                                    children));
                  ("title", (inject title))|] in
  let make =
    ((fun ~title ->
        ((fun ~children ->
            ((React.Dom.createDOMElementVariadic "div"
                ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                (((React.Dom.createDOMElementVariadic "span"
                     ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                     [((title |> s)[@reason.preserve_braces ])]) :: children)
                [@reason.preserve_braces ]))
            [@reason.preserve_braces ]))
        [@warning "-16"]))
    [@warning "-16"]) in
  let make
    (Props :
      <
        title: 'title Js_of_ocaml.Js.readonly_prop  ;children: 'children
                                                                 Js_of_ocaml.Js.readonly_prop
                                                         > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children))
      ~title:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "title" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#title)) in
  fun ~title ->
    fun ~children ->
      fun ?key ->
        fun () ->
          React.createElement make (make_props ?key ~children ~title ())
let t =
  FancyButton.make ~ref:buttonRef
    ~children:[React.Dom.createDOMElementVariadic "div"
                 ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                 []] ()
let t =
  React.Dom.createDOMElementVariadic "button"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("ref",
                  (Js_of_ocaml.Js.Unsafe.inject (ref : React.Dom.domRef)));
                ("className",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("FancyButton")
                        [@reason.raw_literal "FancyButton"]) : string))))|] : 
    React.Dom.domProps) children
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          ?ref:React.Dom.domRef ->
            unit ->
              < children: 'children Js_of_ocaml.Js.readonly_prop   > 
                Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun ?ref ->
          fun () ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                [|("ref", (inject (Js_of_ocaml.Js.Optdef.option ref)));
                  ("key",
                    (inject
                       (Js_of_ocaml.Js.Optdef.option
                          (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (inject
                                                                    children))|] in
  let make =
    ((fun ~children ->
        ((fun ref ->
            ((React.Dom.createDOMElementVariadic "button"
                ~props:(Js_of_ocaml.Js.Unsafe.obj
                          [|("ref",
                              (Js_of_ocaml.Js.Unsafe.inject
                                 (ref : React.Dom.domRef)));("className",
                                                              (Js_of_ocaml.Js.Unsafe.inject
                                                                 (Js_of_ocaml.Js.string
                                                                    ((("FancyButton")
                                                                    [@reason.raw_literal
                                                                    "FancyButton"]) : 
                                                                    string))))|] : 
                React.Dom.domProps) children)
            [@reason.preserve_braces ]))
        [@warning "-16"]))
    [@warning "-16"]) in
  let make =
    React.Dom.forwardRef
      (fun
         (Props :
           < children: 'children Js_of_ocaml.Js.readonly_prop   > 
             Js_of_ocaml.Js.t)
         ->
         fun ref ->
           make
             ~children:(fun (type res) -> fun (type a0) ->
                          fun (a0 : a0 Js_of_ocaml.Js.t) ->
                            fun
                              (_ :
                                a0 ->
                                  < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                              ->
                              (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                              res) (Props : < .. >  Js_of_ocaml.Js.t)
                          (fun x -> x#children)) ref) in
  fun ~children ->
    fun ?key ->
      fun ?ref ->
        fun () ->
          React.createElement make (make_props ?ref ?key ~children ())
let testAttributes =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("translate",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("yes")
                        [@reason.raw_literal "yes"]) : string))))|] : 
    React.Dom.domProps)
    [React.Dom.createDOMElementVariadic "picture"
       ~props:(Js_of_ocaml.Js.Unsafe.obj
                 [|("id",
                     (Js_of_ocaml.Js.Unsafe.inject
                        (Js_of_ocaml.Js.string ((("idpicture")
                           [@reason.raw_literal "idpicture"]) : string))))|] : 
       React.Dom.domProps)
       [React.Dom.createDOMElementVariadic "img"
          ~props:(Js_of_ocaml.Js.Unsafe.obj
                    [|("src",
                        (Js_of_ocaml.Js.Unsafe.inject
                           (Js_of_ocaml.Js.string ((("picture/img.png")
                              [@reason.raw_literal "picture/img.png"]) : 
                              string))));("alt",
                                           (Js_of_ocaml.Js.Unsafe.inject
                                              (Js_of_ocaml.Js.string
                                                 ((("test picture/img.png")
                                                 [@reason.raw_literal
                                                   "test picture/img.png"]) : 
                                                 string))));("id",
                                                              (Js_of_ocaml.Js.Unsafe.inject
                                                                 (Js_of_ocaml.Js.string
                                                                    ((("idimg")
                                                                    [@reason.raw_literal
                                                                    "idimg"]) : 
                                                                    string))))|] : 
          React.Dom.domProps) [];
       React.Dom.createDOMElementVariadic "source"
         ~props:(Js_of_ocaml.Js.Unsafe.obj
                   [|("type",
                       (Js_of_ocaml.Js.Unsafe.inject
                          (Js_of_ocaml.Js.string ((("image/webp")
                             [@reason.raw_literal "image/webp"]) : string))));
                     ("src",
                       (Js_of_ocaml.Js.Unsafe.inject
                          (Js_of_ocaml.Js.string ((("picture/img1.webp")
                             [@reason.raw_literal "picture/img1.webp"]) : 
                             string))))|] : React.Dom.domProps) [];
       React.Dom.createDOMElementVariadic "source"
         ~props:(Js_of_ocaml.Js.Unsafe.obj
                   [|("type",
                       (Js_of_ocaml.Js.Unsafe.inject
                          (Js_of_ocaml.Js.string ((("image/jpeg")
                             [@reason.raw_literal "image/jpeg"]) : string))));
                     ("src",
                       (Js_of_ocaml.Js.Unsafe.inject
                          (Js_of_ocaml.Js.string ((("picture/img2.jpg")
                             [@reason.raw_literal "picture/img2.jpg"]) : 
                             string))))|] : React.Dom.domProps) []]]
let randomElement =
  React.Dom.createDOMElementVariadic "text"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("dx",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("1 2")
                        [@reason.raw_literal "1 2"]) : string))));("dy",
                                                                    (
                                                                    Js_of_ocaml.Js.Unsafe.inject
                                                                    (Js_of_ocaml.Js.string
                                                                    ((("3 4")
                                                                    [@reason.raw_literal
                                                                    "3 4"]) : 
                                                                    string))))|] : 
    React.Dom.domProps) []
let make =
  let make_props
    : name:'name ->
        ?isDisabled:'isDisabled ->
          ?onClick:'onClick ->
            ?key:string ->
              unit ->
                <
                  name: 'name Js_of_ocaml.Js.readonly_prop  ;isDisabled: 
                                                               'isDisabled
                                                                 option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                ;onClick: 
                                                                   'onClick
                                                                    option
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                     > 
                  Js_of_ocaml.Js.t
    =
    fun ~name ->
      fun ?isDisabled ->
        fun ?onClick ->
          fun ?key ->
            fun () ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  [|("key",
                      (inject
                         (Js_of_ocaml.Js.Optdef.option
                            (Option.map Js_of_ocaml.Js.string key))));
                    ("onClick", (inject onClick));("isDisabled",
                                                    (inject isDisabled));
                    ("name", (inject name))|] in
  let make =
    ((fun ~name ->
        ((fun ?isDisabled ->
            ((fun ?onClick ->
                ((React.Dom.createDOMElementVariadic "button"
                    ~props:(Js_of_ocaml.Js.Unsafe.obj
                              [|("name",
                                  (Js_of_ocaml.Js.Unsafe.inject
                                     (Js_of_ocaml.Js.string (name : string))));
                                ("onClick",
                                  (Js_of_ocaml.Js.Unsafe.inject
                                     (Js_of_ocaml.Js.Optdef.option
                                        (onClick : (React.Event.Mouse.t ->
                                                      unit)
                                                     option))));("disabled",
                                                                  (Js_of_ocaml.Js.Unsafe.inject
                                                                    (isDisabled : 
                                                                    bool)))|] : 
                    React.Dom.domProps) [])
                [@reason.preserve_braces ]))
            [@warning "-16"]))
        [@warning "-16"]))
    [@warning "-16"]) in
  let make
    (Props :
      <
        name: 'name Js_of_ocaml.Js.readonly_prop  ;isDisabled: 'isDisabled
                                                                 option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                      ;onClick: 'onClick
                                                                  option
                                                                  Js_of_ocaml.Js.readonly_prop
                                                           > 
        Js_of_ocaml.Js.t)
    =
    make
      ?onClick:(fun (type res) -> fun (type a0) ->
                  fun (a0 : a0 Js_of_ocaml.Js.t) ->
                    fun
                      (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                      -> (Js_of_ocaml.Js.Unsafe.get a0 "onClick" : res)
                  (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#onClick))
      ?isDisabled:(fun (type res) -> fun (type a0) ->
                     fun (a0 : a0 Js_of_ocaml.Js.t) ->
                       fun
                         (_ :
                           a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                         -> (Js_of_ocaml.Js.Unsafe.get a0 "isDisabled" : 
                         res) (Props : < .. >  Js_of_ocaml.Js.t)
                     (fun x -> x#isDisabled))
      ~name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ~name ->
    fun ?isDisabled ->
      fun ?onClick ->
        fun ?key ->
          fun () ->
            React.createElement make
              (make_props ?key ?onClick ?isDisabled ~name ())
let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make =
    ((fun ?(name= (("joe")[@reason.raw_literal "joe"])) ->
        ((React.Dom.createDOMElementVariadic "div"
            ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
            [(((Printf.sprintf (("`name` is %s")
                  [@reason.raw_literal "`name` is %s"]) name)
                 |> React.string)
            [@reason.preserve_braces ])])
        [@reason.preserve_braces ]))
    [@warning "-16"]) in
  let make
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ?name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ?name ())
