module type Foo  =
  sig
    val makeProps :
      ?title:string ->
        ?defaultTitle:string ->
          ?meta:metaField array ->
            ?htmlAttributes:htmlAttribute array ->
              children:React.element ->
                ?key:string ->
                  unit ->
                    <
                      title: string option Js_of_ocaml.Js.readonly_prop  ;
                      defaultTitle: string option
                                      Js_of_ocaml.Js.readonly_prop  ;
                      meta: metaField array option
                              Js_of_ocaml.Js.readonly_prop  ;htmlAttributes: 
                                                               htmlAttribute
                                                                 array option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                ;children: 
                                                                   React.element
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                     > 
                      Js_of_ocaml.Js.t
    val make :
      (<
         title: string option Js_of_ocaml.Js.readonly_prop  ;defaultTitle: 
                                                               string option
                                                                 Js_of_ocaml.Js.readonly_prop
                                                                ;meta: 
                                                                   metaField
                                                                    array
                                                                    option
                                                                    Js_of_ocaml.Js.readonly_prop
                                                                    ;
         htmlAttributes: htmlAttribute array option
                           Js_of_ocaml.Js.readonly_prop  ;children: React.element
                                                                    Js_of_ocaml.Js.readonly_prop
                                                              > 
         Js_of_ocaml.Js.t,
        React.element) React.componentLike
  end
let makeProps
  : ?name:'name ->
      ?key:string ->
        unit ->
          < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
            Js_of_ocaml.Js.t
  =
  fun ?name ->
    fun ?key ->
      fun _ ->
        let open Js_of_ocaml.Js.Unsafe in
          obj
            ((([|(Option.map
                    (fun raw -> ("key", (inject (Js_of_ocaml.Js.string raw))))
                    key);(Option.map (fun raw -> ("name", (inject raw))) name)|]
                 |> Array.to_list)
                |> (List.filter_map (fun x -> x)))
               |> Array.of_list)
let make =
  ((fun ?(name= (("")[@reason.raw_literal ""])) ->
      ((React.createElementVariadic React.Fragment.make
          ((React.Fragment.makeProps ~children:React.null ())
          [@reason.preserve_braces ])
          [React.Dom.createDOMElementVariadic "div"
             ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
             [((React.string
                  ((("Hello ")[@reason.raw_literal "Hello "]) ^ name))
             [@reason.preserve_braces ])];
          React.createElement Hello.make
            (Hello.makeProps ~one:(("1")[@reason.raw_literal "1"])
               ~children:((React.string
                             ((("Hello ")[@reason.raw_literal "Hello "]) ^
                                name))[@reason.preserve_braces ]) ())])
      [@reason.preserve_braces ]))
  [@warning "-16"])
let make =
  let Test
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  Test
let makeProps
  : a:'a ->
      b:'b ->
        ?key:string ->
          unit ->
            <
              a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                        Js_of_ocaml.Js.readonly_prop
                                                       > 
              Js_of_ocaml.Js.t
  =
  fun ~a ->
    fun ~b ->
      fun ?key ->
        fun _ ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              ((([|(Option.map
                      (fun raw ->
                         ("key", (inject (Js_of_ocaml.Js.string raw)))) key);(
                   Some ("b", (inject b)));(Some ("a", (inject a)))|] |>
                   Array.to_list)
                  |> (List.filter_map (fun x -> x)))
                 |> Array.of_list)
let make =
  ((fun ~a ->
      ((fun ~b ->
          fun _ ->
            ((print_endline (("This function should be named `Test`")
                [@reason.raw_literal "This function should be named `Test`"]);
              React.Dom.createDOMElementVariadic "div"
                ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                [])
            [@reason.preserve_braces ]))
      [@warning "-16"]))
  [@warning "-16"])
let make =
  let Test
    (Props :
      <
        a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                  Js_of_ocaml.Js.readonly_prop
                                                 > 
        Js_of_ocaml.Js.t)
    =
    make
      ~b:(fun (type res) -> fun (type a0) ->
            fun (a0 : a0 Js_of_ocaml.Js.t) ->
              fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
            (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
      ~a:(fun (type res) -> fun (type a0) ->
            fun (a0 : a0 Js_of_ocaml.Js.t) ->
              fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop) ->
                (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
            (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
  Test
module External =
  struct
    let componentProps
      : a:int ->
          b:string ->
            ?key:string ->
              unit ->
                <
                  a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                             Js_of_ocaml.Js.readonly_prop
                                                            > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    external component :
      (<
         a: int Js_of_ocaml.Js.readonly_prop  ;b: string
                                                    Js_of_ocaml.Js.readonly_prop
                                                   > 
         Js_of_ocaml.Js.t,
        React.element) React.componentLike = ""[@@otherAttribute
                                                 (("bla")
                                                   [@reason.raw_literal
                                                     "bla"])]
  end
module Bar =
  struct
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                ((print_endline (("This function should be named `Test$Bar`")
                    [@reason.raw_literal
                      "This function should be named `Test$Bar`"]);
                  React.Dom.createDOMElementVariadic "div"
                    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                    [])
                [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test$Bar
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        make
          ~b:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      Test$Bar
    let componentProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let component =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                ((print_endline
                    (("This function should be named `Test$Bar$component`")
                    [@reason.raw_literal
                      "This function should be named `Test$Bar$component`"]);
                  React.Dom.createDOMElementVariadic "div"
                    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                    [])
                [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let component =
      let Test$Bar$component
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        component
          ~b:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      Test$Bar$component
  end
module type X_int  = sig val x : int end
module Func(M:X_int) =
  struct
    let x = M.x + 1
    let makeProps
      : a:'a ->
          b:'b ->
            ?key:string ->
              unit ->
                <
                  a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                            Js_of_ocaml.Js.readonly_prop
                                                           > 
                  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ~b ->
          fun ?key ->
            fun _ ->
              let open Js_of_ocaml.Js.Unsafe in
                obj
                  ((([|(Option.map
                          (fun raw ->
                             ("key", (inject (Js_of_ocaml.Js.string raw))))
                          key);(Some ("b", (inject b)));(Some
                                                           ("a", (inject a)))|]
                       |> Array.to_list)
                      |> (List.filter_map (fun x -> x)))
                     |> Array.of_list)
    let make =
      ((fun ~a ->
          ((fun ~b ->
              fun _ ->
                ((print_endline
                    (("This function should be named `Test$Func`")
                    [@reason.raw_literal
                      "This function should be named `Test$Func`"]) M.x;
                  React.Dom.createDOMElementVariadic "div"
                    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                    [])
                [@reason.preserve_braces ]))
          [@warning "-16"]))
      [@warning "-16"])
    let make =
      let Test$Func
        (Props :
          <
            a: 'a Js_of_ocaml.Js.readonly_prop  ;b: 'b
                                                      Js_of_ocaml.Js.readonly_prop
                                                     > 
            Js_of_ocaml.Js.t)
        =
        make
          ~b:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "b" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#b))
          ~a:(fun (type res) -> fun (type a0) ->
                fun (a0 : a0 Js_of_ocaml.Js.t) ->
                  fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                    -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) () in
      Test$Func
  end
module ForwardRef =
  struct
    let makeProps
      : ?key:string ->
          ?ref:React.Dom.domRef -> unit -> <  >  Js_of_ocaml.Js.t
      =
      fun ?key ->
        fun ?ref ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map (fun raw -> ("ref", (inject raw))) ref);(
                     Option.map
                       (fun raw ->
                          ("key", (inject (Js_of_ocaml.Js.string raw)))) key)|]
                     |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      ((fun theRef ->
          React.Dom.createDOMElementVariadic "div"
            ~props:(Js_of_ocaml.Js.Unsafe.obj
                      [|("ref",
                          (Js_of_ocaml.Js.Unsafe.inject
                             (((theRef |> Js_of_ocaml.Js.Opt.to_option)
                             [@reason.preserve_braces ]) : React.Dom.domRef)))|] : 
            React.Dom.domProps)
            [((React.string (("ForwardRef")
                 [@reason.raw_literal "ForwardRef"]))
            [@reason.preserve_braces ])])
      [@warning "-16"])
    let make =
      React.forwardRef
        (let Test$ForwardRef (Props : <  >  Js_of_ocaml.Js.t) theRef =
           make theRef in
         Test$ForwardRef)
  end
module Memo =
  struct
    let makeProps
      : a:'a ->
          ?key:string ->
            unit ->
              < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ?key ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map
                        (fun raw ->
                           ("key", (inject (Js_of_ocaml.Js.string raw)))) key);(
                     Some ("a", (inject a)))|] |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      ((fun ~a ->
          ((React.Dom.createDOMElementVariadic "div"
              ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
              [(((Printf.sprintf (("`a` is %s")
                    [@reason.raw_literal "`a` is %s"]) a)
                   |> React.string)
              [@reason.preserve_braces ])])
          [@reason.preserve_braces ]))
      [@warning "-16"])
    let make =
      React.memo
        (let Test$Memo
           (Props :
             < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
           =
           make
             ~a:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                   (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) in
         Test$Memo)
  end
module MemoCustomCompareProps =
  struct
    let makeProps
      : a:'a ->
          ?key:string ->
            unit ->
              < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t
      =
      fun ~a ->
        fun ?key ->
          fun _ ->
            let open Js_of_ocaml.Js.Unsafe in
              obj
                ((([|(Option.map
                        (fun raw ->
                           ("key", (inject (Js_of_ocaml.Js.string raw)))) key);(
                     Some ("a", (inject a)))|] |> Array.to_list)
                    |> (List.filter_map (fun x -> x)))
                   |> Array.of_list)
    let make =
      ((fun ~a ->
          ((React.Dom.createDOMElementVariadic "div"
              ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
              [(((Printf.sprintf (("`a` is %d")
                    [@reason.raw_literal "`a` is %d"]) a)
                   |> React.string)
              [@reason.preserve_braces ])])
          [@reason.preserve_braces ]))
      [@warning "-16"])
    let make =
      React.memoCustomCompareProps
        (let Test$MemoCustomCompareProps
           (Props :
             < a: 'a Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
           =
           make
             ~a:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "a" : res)
                   (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#a)) in
         Test$MemoCustomCompareProps)
        (fun prevPros -> fun nextProps -> false)
  end
let fragment foo =
  ((React.createElement React.Fragment.make
      ((React.Fragment.makeProps ~children:foo ())[@bla ]))
  [@bla ])
let polyChildrenFragment foo bar =
  React.createElementVariadic React.Fragment.make
    (React.Fragment.makeProps ~children:React.null ()) [foo; bar]
let nestedFragment foo bar baz =
  React.createElementVariadic React.Fragment.make
    (React.Fragment.makeProps ~children:React.null ())
    [foo;
    React.createElementVariadic React.Fragment.make
      (React.Fragment.makeProps ~children:React.null ()) [bar; baz]]
let upper = React.createElement Upper.make (Upper.makeProps ())
let upperWithProp =
  React.createElement Upper.make (Upper.makeProps ~count ())
let upperWithChild foo =
  React.createElement Upper.make (Upper.makeProps ~children:foo ())
let upperWithChildren foo bar =
  React.createElementVariadic Upper.make
    (Upper.makeProps ~children:React.null ()) [foo; bar]
let lower =
  React.Dom.createDOMElementVariadic "lower"
    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps) []
let lowerWithChildAndProps foo =
  React.Dom.createDOMElementVariadic "lower"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("cols", (Js_of_ocaml.Js.Unsafe.inject (1 : int)));("href",
                                                                    (Js_of_ocaml.Js.Unsafe.inject
                                                                    (Js_of_ocaml.Js.string
                                                                    ((("https://example.com")
                                                                    [@reason.raw_literal
                                                                    "https://example.com"]) : 
                                                                    string))))|] : 
    React.Dom.domProps) [foo]
let lowerWithChildren foo bar =
  React.Dom.createDOMElementVariadic "lower"
    ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps) [foo; bar]
let lowerWithChildrenComplex =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("className",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("flex-container")
                        [@reason.raw_literal "flex-container"]) : string))))|] : 
    React.Dom.domProps)
    [React.Dom.createDOMElementVariadic "div"
       ~props:(Js_of_ocaml.Js.Unsafe.obj
                 [|("className",
                     (Js_of_ocaml.Js.Unsafe.inject
                        (Js_of_ocaml.Js.string ((("sidebar")
                           [@reason.raw_literal "sidebar"]) : string))))|] : 
       React.Dom.domProps)
       [React.Dom.createDOMElementVariadic "h2"
          ~props:(Js_of_ocaml.Js.Unsafe.obj
                    [|("className",
                        (Js_of_ocaml.Js.Unsafe.inject
                           (Js_of_ocaml.Js.string ((("title")
                              [@reason.raw_literal "title"]) : string))))|] : 
          React.Dom.domProps)
          [(((("jsoo-react")[@reason.raw_literal "jsoo-react"]) |> s)
          [@reason.preserve_braces ])];
       React.Dom.createDOMElementVariadic "nav"
         ~props:(Js_of_ocaml.Js.Unsafe.obj
                   [|("className",
                       (Js_of_ocaml.Js.Unsafe.inject
                          (Js_of_ocaml.Js.string ((("menu")
                             [@reason.raw_literal "menu"]) : string))))|] : 
         React.Dom.domProps)
         [React.Dom.createDOMElementVariadic "ul"
            ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
            [(((examples |>
                  (List.map
                     (fun e ->
                        ((React.Dom.createDOMElementVariadic "li"
                            ~props:(Js_of_ocaml.Js.Unsafe.obj
                                      [|("key",
                                          (Js_of_ocaml.Js.Unsafe.inject
                                             (Js_of_ocaml.Js.string
                                                (((e.path)
                                                [@reason.preserve_braces ]) : 
                                                string))))|] : React.Dom.domProps)
                            [React.Dom.createDOMElementVariadic "a"
                               ~props:(Js_of_ocaml.Js.Unsafe.obj
                                         [|("href",
                                             (Js_of_ocaml.Js.Unsafe.inject
                                                (Js_of_ocaml.Js.string
                                                   (((e.path)
                                                   [@reason.preserve_braces ]) : 
                                                   string))));("onClick",
                                                                (Js_of_ocaml.Js.Unsafe.inject
                                                                   (((
                                                                   fun event
                                                                    ->
                                                                    ((
                                                                    ReactEvent.Mouse.preventDefault
                                                                    event;
                                                                    ReactRouter.push
                                                                    e.path)
                                                                    [@reason.preserve_braces
                                                                    ]))
                                                                   [@reason.preserve_braces
                                                                    ]) : 
                                                                   React.Event.Mouse.t
                                                                    -> 
                                                                    unit)))|] : 
                               React.Dom.domProps)
                               [((e.title |> s)[@reason.preserve_braces ])]])
                        [@reason.preserve_braces ]))))
                 |> React.list)
            [@reason.preserve_braces ])]]]]
let lowerWithChildrenComplex2 =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("className",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ((("content-wrapper")
                        [@reason.raw_literal "content-wrapper"]) : string))))|] : 
    React.Dom.domProps)
    [React.Dom.createDOMElementVariadic "div"
       ~props:(Js_of_ocaml.Js.Unsafe.obj
                 [|("className",
                     (Js_of_ocaml.Js.Unsafe.inject
                        (Js_of_ocaml.Js.string ((("content")
                           [@reason.raw_literal "content"]) : string))))|] : 
       React.Dom.domProps)
       [(((let example =
             (examples |>
                (List.find_opt
                   (fun e ->
                      ((e.path =
                          ((List.nth_opt url.path 0) |>
                             (Option.value ~default:(("")
                                [@reason.raw_literal ""]))))
                      [@reason.preserve_braces ]))))
               |> (Option.value ~default:firstExample) in
           React.Dom.createDOMElementVariadic "div"
             ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
             [React.Dom.createDOMElementVariadic "h2"
                ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
                [((example.title |> s)[@reason.preserve_braces ])];
             React.Dom.createDOMElementVariadic "h4"
               ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
               [(((("Rendered component")
                    [@reason.raw_literal "Rendered component"]) |> s)
               [@reason.preserve_braces ])];
             ((example.element)
             [@reason.preserve_braces ]);
             React.Dom.createDOMElementVariadic "h4"
               ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
               [(((("Code")[@reason.raw_literal "Code"]) |> s)
               [@reason.preserve_braces ])];
             ((example.code)
             [@reason.preserve_braces ])]))
       [@reason.preserve_braces ])]]
let nestedElement =
  React.createElement Foo.Bar.make
    (Foo.Bar.makeProps ~a:1 ~b:(("1")[@reason.raw_literal "1"]) ())
let innerHTML =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("dangerouslySetInnerHTML",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (((React.Dom.createMarkup ~__html:(("<lol></lol>")
                          [@reason.raw_literal "<lol></lol>"]))
                     [@reason.preserve_braces ]) : React.Dom.DangerouslySetInnerHTML.t)))|] : 
    React.Dom.domProps) []
