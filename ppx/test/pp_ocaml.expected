let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make =
    ((fun ?(name= "") ->
        (React.Dom.createDOMElementVariadic "div"
           ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
           [React.string ("Hello " ^ name)] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ?name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ?name ())
let element =
  React.Dom.createDOMElementVariadic "div"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("id",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ("foo" : string))))|] : React.Dom.domProps)
    []
let element =
  React.Dom.createDOMElementVariadic "a"
    ~props:(Js_of_ocaml.Js.Unsafe.obj
              [|("id",
                  (Js_of_ocaml.Js.Unsafe.inject
                     (Js_of_ocaml.Js.string ("foo" : string))));("href",
                                                                  (Js_of_ocaml.Js.Unsafe.inject
                                                                    (Js_of_ocaml.Js.string
                                                                    ("https://www.hello.com" : 
                                                                    string))))|] : 
    React.Dom.domProps) [React.string "hello"]
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          unit ->
            < children: 'children Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (
                                                                    inject
                                                                    children))|] in
  let make =
    ((fun ~children:(first, second) ->
        (React.Dom.createDOMElementVariadic "div"
           ~props:(Js_of_ocaml.Js.Unsafe.obj
                     [|("id",
                         (Js_of_ocaml.Js.Unsafe.inject
                            (Js_of_ocaml.Js.string ("foo" : string))))|] : 
           React.Dom.domProps) [first; second] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < children: 'children Js_of_ocaml.Js.readonly_prop   > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children)) in
  fun ~children ->
    fun ?key ->
      fun () -> React.createElement make (make_props ?key ~children ())
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          unit ->
            < children: 'children Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (
                                                                    inject
                                                                    children))|] in
  let make =
    ((fun ~children:kids ->
        (React.Dom.createDOMElementVariadic "div"
           ~props:(Js_of_ocaml.Js.Unsafe.obj
                     [|("id",
                         (Js_of_ocaml.Js.Unsafe.inject
                            (Js_of_ocaml.Js.string ("foo" : string))))|] : 
           React.Dom.domProps) kids : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < children: 'children Js_of_ocaml.Js.readonly_prop   > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children)) in
  fun ~children ->
    fun ?key ->
      fun () -> React.createElement make (make_props ?key ~children ())
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          unit ->
            < children: 'children Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (
                                                                    inject
                                                                    children))|] in
  let make =
    ((fun ~children:(first, second) ->
        fun () ->
          (React.Dom.createDOMElementVariadic "div"
             ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
             [first; second] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < children: 'children Js_of_ocaml.Js.readonly_prop   > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children)) () in
  fun ~children ->
    fun ?key ->
      fun () -> React.createElement make (make_props ?key ~children ())
let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make =
    ((fun ?(name= "") ->
        (React.Dom.createDOMElementVariadic "div"
           ~props:(Js_of_ocaml.Js.Unsafe.obj [||] : React.Dom.domProps)
           [name] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ?name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ?name ())
let make =
  let make_props : ?key:string -> unit -> <  >  Js_of_ocaml.Js.t =
    fun ?key ->
      fun () ->
        let open Js_of_ocaml.Js.Unsafe in
          obj
            [|("key",
                (inject
                   (Js_of_ocaml.Js.Optdef.option
                      (Option.map Js_of_ocaml.Js.string key))))|] in
  let make () =
    (React.Dom.createDOMElementVariadic "a"
       ~props:(Js_of_ocaml.Js.Unsafe.obj
                 [|("href",
                     (Js_of_ocaml.Js.Unsafe.inject
                        (Js_of_ocaml.Js.Optdef.option
                           (Option.map Js_of_ocaml.Js.string
                              (Some "https://opam.ocaml.org" : string option)))))|] : 
       React.Dom.domProps) [] : React.element) in
  let make (Props : <  >  Js_of_ocaml.Js.t) = make () in
  fun ?key -> fun () -> React.createElement make (make_props ?key ())
let make =
  let make_props
    : name:Js.js_string Js.t ->
        ?key:string ->
          unit ->
            < name: Js.js_string Js.t Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make =
    Js_of_ocaml.Js.Unsafe.js_expr
      "require(\"my-react-library\").MyReactComponent" in
  fun ~name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ~name ())
