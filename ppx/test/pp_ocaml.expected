[@@@react.dom ]
let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make =
    ((fun ?(name= "") ->
        (div [||] [React.string ("Hello " ^ name)] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ?name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ?name ())
let element = div [|(id "foo")|] []
let element =
  a [|(id "foo");(href "https://www.hello.com")|] [React.string "hello"]
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          unit ->
            < children: 'children Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (
                                                                    inject
                                                                    children))|] in
  let make =
    ((fun ~children:(first, second) ->
        (div [|(id "foo")|] [first; second] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < children: 'children Js_of_ocaml.Js.readonly_prop   > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children)) in
  fun ~children ->
    fun ?key ->
      fun () -> React.createElement make (make_props ?key ~children ())
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          unit ->
            < children: 'children Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (
                                                                    inject
                                                                    children))|] in
  let make =
    ((fun ~children:kids -> (div [|(id "foo")|] kids : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < children: 'children Js_of_ocaml.Js.readonly_prop   > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children)) in
  fun ~children ->
    fun ?key ->
      fun () -> React.createElement make (make_props ?key ~children ())
let make =
  let make_props
    : children:'children ->
        ?key:string ->
          unit ->
            < children: 'children Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~children ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("children",
                                                                    (
                                                                    inject
                                                                    children))|] in
  let make =
    ((fun ~children:(first, second) ->
        fun () -> (div [||] [first; second] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < children: 'children Js_of_ocaml.Js.readonly_prop   > 
        Js_of_ocaml.Js.t)
    =
    make
      ~children:(fun (type res) -> fun (type a0) ->
                   fun (a0 : a0 Js_of_ocaml.Js.t) ->
                     fun
                       (_ :
                         a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                       -> (Js_of_ocaml.Js.Unsafe.get a0 "children" : 
                       res) (Props : < .. >  Js_of_ocaml.Js.t)
                   (fun x -> x#children)) () in
  fun ~children ->
    fun ?key ->
      fun () -> React.createElement make (make_props ?key ~children ())
let make =
  let make_props
    : ?name:'name ->
        ?key:string ->
          unit ->
            < name: 'name option Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  let make = ((fun ?(name= "") -> (div [||] [name] : React.element))
    [@warning "-16"]) in
  let make
    (Props :
      < name: 'name option Js_of_ocaml.Js.readonly_prop   >  Js_of_ocaml.Js.t)
    =
    make
      ?name:(fun (type res) -> fun (type a0) ->
               fun (a0 : a0 Js_of_ocaml.Js.t) ->
                 fun (_ : a0 -> < get: res   ;.. >  Js_of_ocaml.Js.gen_prop)
                   -> (Js_of_ocaml.Js.Unsafe.get a0 "name" : res)
               (Props : < .. >  Js_of_ocaml.Js.t) (fun x -> x#name)) in
  fun ?name ->
    fun ?key -> fun () -> React.createElement make (make_props ?key ?name ())
let make =
  let make_props : ?key:string -> unit -> <  >  Js_of_ocaml.Js.t =
    fun ?key ->
      fun () ->
        let open Js_of_ocaml.Js.Unsafe in
          obj
            [|("key",
                (inject
                   (Js_of_ocaml.Js.Optdef.option
                      (Option.map Js_of_ocaml.Js.string key))))|] in
  let make () = (a [|(href "https://opam.ocaml.org")|] [] : React.element) in
  let make (Props : <  >  Js_of_ocaml.Js.t) = make () in
  fun ?key -> fun () -> React.createElement make (make_props ?key ())
let make =
  let make_props
    : name:Js.js_string Js.t ->
        ?key:string ->
          unit ->
            < name: Js.js_string Js.t Js_of_ocaml.Js.readonly_prop   > 
              Js_of_ocaml.Js.t
    =
    fun ~name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    name))|] in
  fun ~name ->
    fun ?key ->
      fun () ->
        React.createElement
          (Js_of_ocaml.Js.Unsafe.js_expr
             "require(\"my-react-library\").MyReactComponent")
          (make_props ?key ~name ())
let make =
  let make_props
    : ?name:Js.js_string Js.t ->
        ?key:string ->
          unit ->
            < name: Js.js_string Js.t option Js_of_ocaml.Js.readonly_prop  
              >  Js_of_ocaml.Js.t
    =
    fun ?name ->
      fun ?key ->
        fun () ->
          let open Js_of_ocaml.Js.Unsafe in
            obj
              [|("key",
                  (inject
                     (Js_of_ocaml.Js.Optdef.option
                        (Option.map Js_of_ocaml.Js.string key))));("name",
                                                                    (
                                                                    inject
                                                                    (Js_of_ocaml.Js.Optdef.option
                                                                    name)))|] in
  fun ?name ->
    fun ?key ->
      fun () ->
        React.createElement
          (Js_of_ocaml.Js.Unsafe.js_expr
             "require(\"my-react-library\").MyReactComponent")
          (make_props ?key ?name ())
